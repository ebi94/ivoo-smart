{"version":3,"file":"static/js/239.77222105.chunk.js","mappings":"mRAAMA,EAAUC,mCACVC,EAAU,IAAIC,QAEpBD,EAAQE,OAAO,eAAgB,oBAE/B,IAyBA,EAzBoB,SAAAC,GAClB,IAAMC,EAAU,CACdC,KAAMF,GAAUA,EAAOE,KACvBC,MAAOH,GAAUA,EAAOG,MACxBC,QAASJ,GAAUA,EAAOI,SAGtBC,EAAiB,CACrBC,OAAQ,OACRT,QAASA,EACTU,KAAMC,KAAKC,UAAUR,GACrBS,SAAU,UAGZ,OADFC,QAAQC,IAAI,SAAUjB,GACbkB,MAAM,GAAD,OAAIlB,EAAJ,YAAuBU,GAAgBS,KAA5C,mCAAiD,WAAMC,GAAN,gGAGrCA,EAAEC,OAHmC,OAGpDC,EAHoD,sDAKpDA,EAAS,GAL2C,2CAO1CA,IAP0C,yDAAjD,wDCdIC,EAAU,SAACC,GACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOpB,EAAP,KAAeqB,EAAf,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KACA,GAAwCH,EAAAA,EAAAA,WAAS,GAAjD,eAAOI,EAAP,KAAqBC,EAArB,KASMC,EAAY,mCAAG,WAAOC,GAAP,8EACnBA,EAAMC,iBACNL,EAAUJ,EAASnB,IAFA,SAID6B,EAAY7B,GAJX,OAIb8B,EAJa,OAKnBnB,QAAQC,IAAI,mBAAoBkB,GAC5BA,GAAsB,OAAfA,EAAIC,QACbN,GAAgB,GAPC,2CAAH,uDAuBlBO,EAAAA,EAAAA,YAAU,WAC2B,IAA/BC,OAAOC,KAAKZ,GAAQa,QAAgBX,IACtCH,EAAU,IA/BZe,EAAAA,EAAAA,QAAwB,CACtBhC,QAAS,UACTiC,YAAa,oCAgCd,CAACf,EAAQE,IAWZ,MAAO,CACLc,aAVmB,SAACX,GACpBA,EAAMY,UACNlB,GAAU,SAACrB,GAAD,eAAC,UACNA,GADK,cAEP2B,EAAMa,OAAOtC,KAAOyB,EAAMa,OAAOC,WAEpClB,GAAU,SAACD,GAAD,eAAC,UAAiBA,GAAlB,cAA2BK,EAAMa,OAAOtC,KAAO,SAKzDwB,aAAAA,EACA1B,OAAAA,EACAsB,OAAAA,IC1DW,SAASH,EAASnB,GAC/B,IAAIsB,EAAS,GAab,OAXKtB,EAAOE,OACVoB,EAAOpB,KAAO,oBAEXF,EAAOG,MAEA,eAAeuC,KAAK1C,EAAOG,SACrCmB,EAAOnB,MAAQ,4BAFfmB,EAAOnB,MAAQ,4BAIZH,EAAOI,UACVkB,EAAOlB,QAAU,uBAEZkB,E,yDCdIqB,GAAUC,EAAAA,EAAAA,IAAO,IAAPA,CAAH,+CAIPC,GAAYD,EAAAA,EAAAA,IAAO,MAAPA,CAAH,oEAKTE,GAAcF,EAAAA,EAAAA,IAAO,MAAPA,CAAH,qE,SCSxB,GAAeG,EAAAA,EAAAA,IAAf,EAXc,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,EAC/B,OACE,UAACL,EAAD,YACE,wBAAKK,EAAEF,MACP,SAACF,EAAD,WACE,SAACH,EAAD,UAAUO,EAAED,aCZPJ,GAAYD,EAAAA,EAAAA,IAAO,MAAPA,CAAH,wFAMTO,GAAcP,EAAAA,EAAAA,IAAO,QAAPA,CAAH,gDCNXQ,GAAkBR,EAAAA,EAAAA,IAAO,MAAPA,CAAH,qHAOfS,GAAiBT,EAAAA,EAAAA,IAAO,WAAPA,CAAH,mFAMdU,GAAQV,EAAAA,EAAAA,IAAO,QAAPA,CAAH,mGCElB,GAAeG,EAAAA,EAAAA,IAAf,EAZc,SAAC,GAAD,IAAG7C,EAAH,EAAGA,KAAMqD,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,SAAUN,EAAhC,EAAgCA,EAAhC,OACZ,UAAC,EAAD,YACE,SAACI,EAAD,CAAOG,QAASvD,EAAhB,SAAuBgD,EAAEhD,MACzB,SAACiD,EAAD,CACEI,YAAaL,EAAEK,GACfrD,KAAMA,EACNwD,GAAIxD,EACJsD,SAAUA,UCIhB,GAAeT,EAAAA,EAAAA,IAAf,EAZiB,SAAC,GAAD,IAAG7C,EAAH,EAAGA,KAAMqD,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,SAAUN,EAAhC,EAAgCA,EAAhC,OACf,UAACE,EAAD,YACE,SAACE,EAAD,CAAOG,QAASvD,EAAhB,SAAuBgD,EAAEhD,MACzB,SAACmD,EAAD,CACEE,YAAaL,EAAEK,GACfG,GAAIxD,EACJA,KAAMA,EACNsD,SAAUA,UCTHG,GAAmBf,EAAAA,EAAAA,IAAO,MAAPA,CAAH,yHAQhBgB,GAAYhB,EAAAA,EAAAA,IAAO,OAAPA,CAAH,iKAUTiB,GAAOjB,EAAAA,EAAAA,IAAO,OAAPA,CAAH,0IAQJkB,GAAkBlB,EAAAA,EAAAA,IAAO,MAAPA,CAAH,oJC8D5B,GAAeG,EAAAA,EAAAA,IAAf,EA5EgB,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,QAASS,EAA0B,EAA1BA,GAAIR,EAAsB,EAAtBA,EACrC,EAAuDhC,EACrDC,GADMnB,EAAR,EAAQA,OAAQsB,EAAhB,EAAgBA,OAAQgB,EAAxB,EAAwBA,aAAcZ,EAAtC,EAAsCA,aAehCqC,EAAiB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAClBC,EAAe3C,EAAO0C,GAC5B,OACE,SAAC,KAAD,CAAME,aAAW,EAACC,UAAU,OAA5B,UACE,SAACN,EAAD,CAAMO,MAAO9C,EAAO0C,GAApB,SAA4BC,OAKlC,OACE,SAACN,EAAD,CAAkBD,GAAIA,EAAtB,UACE,UAAC,IAAD,CAAKW,QAAQ,gBAAgBC,MAAM,SAAnC,WACE,SAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAjC,UACE,SAAC,KAAD,CAAOR,aAAW,EAACC,UAAU,OAA7B,UACE,SAAC,EAAD,CAAOnB,MAAOA,EAAOC,QAASA,SAGlC,SAAC,IAAD,CAAKsB,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAjC,UACE,SAAC,KAAD,CAAOR,aAAW,EAACC,UAAU,QAA7B,UACE,UAACP,EAAD,CAAWe,aAAa,MAAMC,SAAUlD,EAAxC,WACE,UAAC,IAAD,CAAKmD,KAAM,GAAX,WACE,SAAC,EAAD,CACEb,KAAK,OACL9D,KAAK,OACLqD,YAAY,YACZd,MAAOzC,EAAOE,MAAQ,GACtBsD,SAAUlB,KAEZ,SAACyB,EAAD,CAAgBC,KAAK,aAEvB,UAAC,IAAD,CAAKa,KAAM,GAAX,WACE,SAAC,EAAD,CACEb,KAAK,OACL9D,KAAK,QACLqD,YAAY,aACZd,MAAOzC,EAAOG,OAAS,GACvBqD,SAAUlB,KAEZ,SAACyB,EAAD,CAAgBC,KAAK,cAEvB,UAAC,IAAD,CAAKa,KAAM,GAAX,WACE,SAAC,EAAD,CACEtB,YAAY,eACZd,MAAOzC,EAAOI,SAAW,GACzBF,KAAK,UACLsD,SAAUlB,KAEZ,SAACyB,EAAD,CAAgBC,KAAK,gBAEvB,SAACF,EAAD,WACE,SAACgB,EAAA,EAAD,CAAQ5E,KAAK,SAAb,SAAuBgD,EAAE","sources":["services/contactForm.js","common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["const baseUrl = process.env.REACT_APP_BACKEND_URL;\nconst headers = new Headers()\n\nheaders.append('Content-Type', 'application/json')\n\nconst ContactForm = values => {\n  const reqBody = {\n    name: values && values.name,\n    email: values && values.email,\n    message: values && values.message\n  }\n\n  const requestOptions = {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(reqBody),\n    redirect: 'follow'\n  }\nconsole.log('baseur', baseUrl)\n  return fetch(`${baseUrl}/contact`, requestOptions).then(async r => {\n    let result\n    try {\n      result = await r.json()\n    } catch (e) {\n      result = {}\n    }\n    return { ...result }\n  })\n}\n\nexport default ContactForm\n","import { useState, useEffect } from \"react\";\r\nimport { notification, message } from \"antd\";\r\nimport axios from \"axios\";\r\nimport ContactForm from \"../../services/contactForm\";\r\n\r\nexport const useForm = (validate: any) => {\r\n  const [values, setValues] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n  const openNotificationWithIcon = () => {\r\n    notification[\"success\"]({\r\n      message: \"Success\",\r\n      description: \"Pesan anda berhasil dikirim \",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setErrors(validate(values));\r\n    // Your url for API\r\n    const res = await ContactForm(values);\r\n    console.log('res contact form', res)\r\n    if (res && res.status === \"OK\") {\r\n      setShouldSubmit(true);\r\n      // message.success('Pesan anda berhasil dikirim');\r\n    } else {\r\n      // message.error('Ooops ada kesalahan server !');\r\n    }\r\n    // if (Object.keys(values).length === 3) {\r\n    //   axios\r\n    //     .post(url, {\r\n    //       ...values,\r\n    //     })\r\n    //     .then(() => {\r\n    //       setShouldSubmit(true);\r\n    //     });\r\n    // }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues(\"\");\r\n      openNotificationWithIcon();\r\n    }\r\n  }, [errors, shouldSubmit]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist();\r\n    setValues((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: any;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")<any>`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(67, 187, 120);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import {useState} from \"react\";\r\nimport { Row, Col, message } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide, Zoom } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport ContactForm from \"../../services/contactForm\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(\r\n    validate\r\n  ) as any;\r\n\r\n  \r\n  // const handleSubmit = async (values) => {\r\n  //   const res = await ContactForm(values)\r\n  //   if (res) {\r\n  //     message.success('Pesan anda berhasil dikirim');\r\n  //   } else {\r\n  //     message.error('Ooops ada kesalahan server !');\r\n  //   }\r\n  // }\r\n\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type];\r\n    return (\r\n      <Zoom triggerOnce direction=\"left\">\r\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\r\n      </Zoom>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide triggerOnce direction=\"left\">\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide triggerOnce direction=\"right\">\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Your Message\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Kirim\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["baseUrl","process","headers","Headers","append","values","reqBody","name","email","message","requestOptions","method","body","JSON","stringify","redirect","console","log","fetch","then","r","json","result","useForm","validate","useState","setValues","errors","setErrors","shouldSubmit","setShouldSubmit","handleSubmit","event","preventDefault","ContactForm","res","status","useEffect","Object","keys","length","notification","description","handleChange","persist","target","value","test","Content","styled","Container","TextWrapper","withTranslation","title","content","t","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","ValidationType","type","ErrorMessage","triggerOnce","direction","erros","justify","align","lg","md","sm","xs","autoComplete","onSubmit","span","Button"],"sourceRoot":""}